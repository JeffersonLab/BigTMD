#!/usr/bin/env python
import numpy as np
from mpmath import fp
from numba import jit
import numpy as np
EulerGamma=np.euler_gamma
@jit(cache=True)
def _PolyLOG(s, z):
    tol = 1e-10
    l = 0
    k = 1
    zk = z
    while 1:
        term = zk / k**s
        l += term
        if abs(term) < tol:
            break
        zk *= z
        k += 1
    return l
@jit(cache=True)
def PolyLOG(s, z):
    #return fp.polylog(s,z)
    #if abs(z) > 0.75:
    #  return -PolyLOG(s,1-z) + np.pi**2/6 - np.log(z)*np.log(1-z)
    if abs(z) >1: 
      return -PolyLOG(s, 1/z) - np.pi**2/6 - 0.5*np.log(-z)**2
    return _PolyLOG(s, z)
@jit(cache=True)
def regular(g=None,gp=None,s=None,t=None,Q=None,s23=None,mu=None,nf=None):
    return 0.00173611111111111*(Q**2 + s)*(s23 - t)**2*((6*Q**2 + 3*s + 3*t)/np.sqrt(4*Q**2*s23 + (s + t)**2) - (4*Q**2*s23 + (s + t)**2)**(-1.5)*(18*Q**2 + 9*s + 9*t)*(2*Q**2*s23 + s*(s23 + t) + t*(-s23 + t))**2/(s23 - t)**2 - 12*(6*Q**4*s23**2 + 2*Q**2*s23*t*(3*s + 2*t) + t**2*(s + t)**2)*(Q**2 + s - s23 + t)**2*np.log((2*Q**2 + s + t - np.sqrt(4*Q**2*s23 + (s + t)**2))/(2*Q**2 + s + t + np.sqrt(4*Q**2*s23 + (s + t)**2)))/((s23 - t)**2*(4*Q**2*s23 + (s + t)**2)**2) - (24*Q**2*s23 + 12*s*(s23 + t) + 12*t*(-s23 + t))/((-s23 + t)*np.sqrt(4*Q**2*s23 + (s + t)**2)))/(np.pi**5*(Q**2 + t)*(2*Q**2 + s + t)*np.sqrt(4*Q**2*s23 + s**2 + 2*s*t + t**2)) - 0.00173611111111111*(s - s23)**2*((6*Q**2 + 3*s + 3*t)/np.sqrt(4*Q**2*s23 + (s + t)**2) - (12*s**2 + 12*s*(-s23 + t) + 12*s23*(2*Q**2 + t))/((s - s23)*np.sqrt(4*Q**2*s23 + (s + t)**2)) - (4*Q**2*s23 + (s + t)**2)**(-1.5)*(18*Q**2 + 9*s + 9*t)*(s**2 + s*(-s23 + t) + s23*(2*Q**2 + t))**2/(s - s23)**2 - 12*(Q**2 + s - s23 + t)**2*(6*Q**4*s23**2 + 6*Q**2*s*s23*t + s**4 + 2*s**3*t + s**2*(4*Q**2*s23 + t**2))*np.log((2*Q**2 + s + t - np.sqrt(4*Q**2*s23 + (s + t)**2))/(2*Q**2 + s + t + np.sqrt(4*Q**2*s23 + (s + t)**2)))/((s - s23)**2*(4*Q**2*s23 + (s + t)**2)**2))/(np.pi**5*(2*Q**2 + s + t)*np.sqrt(4*Q**2*s23 + s**2 + 2*s*t + t**2)) - 0.00130208333333333*(s23 - t)**2*(-(6 - 2*(2*Q**2 + s + t)**2/(4*Q**2*s23 + (s + t)**2) + 4*(6*Q**4 + Q**2*(6*s - 2*s23 + 6*t) + (s + t)**2)*(2*Q**2*s23 + s*(s23 + t) + t*(-s23 + t))**2/((s23 - t)**2*(4*Q**2*s23 + (s + t)**2)**2) - 2*(8*Q**2 + 4*s + 4*t)*(2*Q**2*s23 + s*(s23 + t) + t*(-s23 + t))/((-s23 + t)*(4*Q**2*s23 + (s + t)**2)))*np.log((2*Q**2 + s + t - np.sqrt(4*Q**2*s23 + (s + t)**2))/(2*Q**2 + s + t + np.sqrt(4*Q**2*s23 + (s + t)**2))) + (8*Q**2 + 4*s + 4*t)/np.sqrt(4*Q**2*s23 + (s + t)**2) - (4*Q**2*s23 + (s + t)**2)**(-1.5)*(24*Q**2 + 12*s + 12*t)*(2*Q**2*s23 + s*(s23 + t) + t*(-s23 + t))**2/(s23 - t)**2 + (32*Q**2*s23 + 16*s*(s23 + t) + 16*t*(-s23 + t))/((-s23 + t)*np.sqrt(4*Q**2*s23 + (s + t)**2)))/(np.pi**5*(2*Q**2 + s + t)*np.sqrt(4*Q**2*s23 + s**2 + 2*s*t + t**2)) + (Q**2*s - 2*Q**2*s23 - s23*t)*(-6*(-0.015625*np.log(s23)/np.pi**5 + 0.015625*np.log(np.pi)/np.pi**5 + 0.03125*np.log(2)/np.pi**5)*(2*Q**4 + 2*Q**2*s - 2*Q**2*s23 + 4*Q**2*t + 2*s**2 - 6*s*s23 + 4*s*t + 4*s23**2 - 4*s23*t + 2*t**2) - 0.1875*(-2*Q**4 - Q**2*s - 3*Q**2*t - s*t - t**2)/np.pi**5 - 0.375*(Q**4 + Q**2*s - Q**2*s23 + 2*Q**2*t + s**2 - 3*s*s23 + 2*s*t + 2*s23**2 - 2*s23*t + t**2)*np.log(mu)/np.pi**5 + 0.1875*EulerGamma*(Q**4 + Q**2*s - Q**2*s23 + 2*Q**2*t + s**2 - 3*s*s23 + 2*s*t + 2*s23**2 - 2*s23*t + t**2)/np.pi**5 - 0.0625*(3*Q**4 + 3*Q**2*s - 3*Q**2*s23 + 6*Q**2*t + 3*s**2 - 9*s*s23 + 6*s*t + 6*s23**2 - 6*s23*t + 3*t**2)*np.log(Q**2*(s - s23)**2*(Q**2 + s - s23 + t)/(Q**2*(s - 2*s23) - s23*t)**2)/np.pi**5)/((9.0*Q**2 + 9.0*t)*(Q**2*(s - 2*s23) - s23*t)*(2*Q**2 + s + t)) + 0.00173611111111111*(-s + s23)*((24*Q**4*s23 + 12*Q**2*(s**2 + s*(-2*s23 + t) + 2*s23*(s23 + t)) + 12*s23*t*(s + t))*np.log((2*Q**2 + s + t - np.sqrt(4*Q**2*s23 + (s + t)**2))/(2*Q**2 + s + t + np.sqrt(4*Q**2*s23 + (s + t)**2)))/((s - s23)*(4*Q**2*s23 + (s + t)**2)) + (12*s**2 + 12*s*(-s23 + t) + 12*s23*(2*Q**2 + t))/((s - s23)*np.sqrt(4*Q**2*s23 + (s + t)**2)))*(4*Q**4 - Q**2*s + 7*Q**2*s23 + 4*Q**2*t + s*s23 + 4*s23*t + t**2)/(np.pi**5*(Q**2 + t)*(2*Q**2 + s + t)*np.sqrt(4*Q**2*s23 + s**2 + 2*s*t + t**2)) - 0.00130208333333333*(s - s23)**2*(3*Q**2 + s + 2*t)*(-(6 - 2*(2*Q**2 + s + t)**2/(4*Q**2*s23 + (s + t)**2) - 2*(8*Q**2 + 4*s + 4*t)*(s**2 + s*(-s23 + t) + s23*(2*Q**2 + t))/((s - s23)*(4*Q**2*s23 + (s + t)**2)) + 4*(6*Q**4 + Q**2*(6*s - 2*s23 + 6*t) + (s + t)**2)*(s**2 + s*(-s23 + t) + s23*(2*Q**2 + t))**2/((s - s23)**2*(4*Q**2*s23 + (s + t)**2)**2))*np.log((2*Q**2 + s + t - np.sqrt(4*Q**2*s23 + (s + t)**2))/(2*Q**2 + s + t + np.sqrt(4*Q**2*s23 + (s + t)**2))) + (8*Q**2 + 4*s + 4*t)/np.sqrt(4*Q**2*s23 + (s + t)**2) + (16*s**2 + 16*s*(-s23 + t) + 16*s23*(2*Q**2 + t))/((s - s23)*np.sqrt(4*Q**2*s23 + (s + t)**2)) - (4*Q**2*s23 + (s + t)**2)**(-1.5)*(24*Q**2 + 12*s + 12*t)*(s**2 + s*(-s23 + t) + s23*(2*Q**2 + t))**2/(s - s23)**2)/(np.pi**5*(Q**2 + t)*(2*Q**2 + s + t)*np.sqrt(4*Q**2*s23 + s**2 + 2*s*t + t**2)) + 0.0208333333333333*(s - s23)/(np.pi**5*(Q**2 + t)) - 0.0104166666666667*(4*Q**2 + s + 3*t)/(np.pi**5*(Q**2 + t)) + 0.333333333333333*(-(0.0625*(-Q**4 - 2*Q**2*t - t**2)/np.pi**5 + (-0.03125*np.log(s23)/np.pi**5 + 0.03125*np.log(np.pi)/np.pi**5 + 0.0625*np.log(2)/np.pi**5)*(2*Q**4 + 2*Q**2*s + 2*Q**2*s23 + 4*Q**2*t + 2*s**2 - 2*s*s23 + 4*s*t + 2*t**2))*(-Q**2*s + 2*Q**2*s23 + s23*t) - 0.125*(-Q**2*s + 2*Q**2*s23 + s23*t)*(Q**4 + Q**2*s + Q**2*s23 + 2*Q**2*t + s**2 - s*s23 + 2*s*t + t**2)*np.log(mu)/np.pi**5 + 0.0625*EulerGamma*(-Q**2*s + 2*Q**2*s23 + s23*t)*(Q**4 + Q**2*s + Q**2*s23 + 2*Q**2*t + s**2 - s*s23 + 2*s*t + t**2)/np.pi**5 - 0.0625*(2*Q**2*s23 + s**2 - s*s23 + s*t + s23*t)*(Q**4 + Q**2*s + Q**2*s23 + 2*Q**2*t + s**2 - s*s23 + 2*s*t + t**2)/np.pi**5)/((Q**2 + t)*(s - s23)**2*(2*Q**2 + s + t)) - 0.0208333333333333*(Q**2*s + Q**2*s23 + s**2 - s*s23 + 2*s*t)*(-2*Q**2*s23*np.log(mu) + Q**2*s23*np.log(s23) - 2*Q**2*s23 - 2*Q**2*s23*np.log(2) - Q**2*s23*np.log(np.pi) + EulerGamma*Q**2*s23 - s*s23 - 2*s*t*np.log(mu) + s*t*np.log(s23) - 2*s*t*np.log(2) - s*t*np.log(np.pi) - s*t + EulerGamma*s*t + s23**2 - s23*t)/(np.pi**5*(Q**2 + s)*(Q**2 + t)*(s - s23)**2) + 0.0208333333333333*(4*Q**4*s - 2*Q**4*s23 - 6*Q**4*t + 6*Q**2*s**2 - 9*Q**2*s*s23 - 4*Q**2*s*t + 8*Q**2*s23**2 - 5*Q**2*s23*t - 10*Q**2*t**2 + 2*s**3 - 4*s**2*s23 - 5*s**2*t + 4*s*s23**2 + 13*s*s23*t - 16*s*t**2 - 12*s23**2*t + 17*s23*t**2 - 9*t**3)*np.log((2*Q**2 + s + t + np.sqrt(4*Q**2*s23 + s**2 + 2*s*t + t**2))/(2*Q**2 + s + t - np.sqrt(4*Q**2*s23 + s**2 + 2*s*t + t**2)))/(np.pi**5*t*(2*Q**2 + s + t)*np.sqrt(4*Q**2*s23 + s**2 + 2*s*t + t**2)) + (-(-0.03125*np.log(s23)/np.pi**5 + 0.03125*np.log(np.pi)/np.pi**5 + 0.0625*np.log(2)/np.pi**5)*(-2*Q**4 + 2*Q**2*s23 - 2*Q**2*t + 2*s**2 - 4*s*s23 + 2*s23**2 + 2*s23*t) + 0.0625*(Q**2*s + Q**2*t + s**2 - s*s23 + s23*t + t**2)/np.pi**5 - 0.0625*(-2*Q**4 + 2*Q**2*s23 - 2*Q**2*t + 2*s**2 - 4*s*s23 + 2*s23**2 + 2*s23*t)*np.log(mu)/np.pi**5 + 0.03125*EulerGamma*(-2*Q**4 + 2*Q**2*s23 - 2*Q**2*t + 2*s**2 - 4*s*s23 + 2*s23**2 + 2*s23*t)/np.pi**5)/(t*(3.0*s - 3.0*s23)) - 0.0208333333333333*(Q**2 + s - s23 + t)*(-2*Q**2*s23*np.log(mu) + Q**2*s23*np.log(s23) - 2*Q**2*s23 - 2*Q**2*s23*np.log(2) - Q**2*s23*np.log(np.pi) + EulerGamma*Q**2*s23 - 2*s*s23*np.log(mu) + s*s23*np.log(s23) - 2*s*s23*np.log(2) - s*s23*np.log(np.pi) - s*s23 + EulerGamma*s*s23 - s*t + 2*s23**2*np.log(mu) - s23**2*np.log(s23) - EulerGamma*s23**2 + s23**2 + s23**2*np.log(np.pi) + 2*s23**2*np.log(2) - 2*s23*t*np.log(mu) + s23*t*np.log(s23) - 2*s23*t*np.log(2) - s23*t*np.log(np.pi) - s23*t + EulerGamma*s23*t)/(np.pi**5*t*(s - s23)**2) + (((-0.03125*np.log(s23)/np.pi**5 + 0.03125*np.log(np.pi)/np.pi**5 + 0.0625*np.log(2)/np.pi**5)*(-4*Q**6 - 6*Q**4*s - 4*Q**4*t - 2*Q**2*s**2 - 8*Q**2*s*t - 2*Q**2*s23*t - 4*s**2*t + 2*s*s23*t - 4*s*t**2) + 0.0625*(-2*Q**4*s + 2*Q**4*s23 - Q**4*t - 3*Q**2*s**2 + 3*Q**2*s*s23 - 2*Q**2*s*t + Q**2*s23*t - Q**2*t**2 - s**3 + s**2*s23 - s**2*t + s*s23*t - s*t**2)/np.pi**5)*(Q**2*s + s**2 - s*s23 + s*t) + 0.0625*(Q**2*s + s**2 - s*s23 + s*t)*(-4*Q**6 - 6*Q**4*s - 4*Q**4*t - 2*Q**2*s**2 - 8*Q**2*s*t - 2*Q**2*s23*t - 4*s**2*t + 2*s*s23*t - 4*s*t**2)*np.log(mu)/np.pi**5 - 0.03125*EulerGamma*(Q**2*s + s**2 - s*s23 + s*t)*(-4*Q**6 - 6*Q**4*s - 4*Q**4*t - 2*Q**2*s**2 - 8*Q**2*s*t - 2*Q**2*s23*t - 4*s**2*t + 2*s*s23*t - 4*s*t**2)/np.pi**5 + 0.03125*(2*Q**2*s23 + s**2 - s*s23 + s*t + s23*t)*(-4*Q**6 - 6*Q**4*s - 4*Q**4*t - 2*Q**2*s**2 - 8*Q**2*s*t - 2*Q**2*s23*t - 4*s**2*t + 2*s*s23*t - 4*s*t**2)/np.pi**5)/(t*(3.0*Q**2 + 3.0*s)*(s - s23)**2*(2*Q**2 + s + t)) + 0.000868055555555556*(s23 - t)*(-(24*Q**4*s23 + 12*Q**2*(s*(2*s23 + t) - 2*s23**2 + 2*s23*t + t**2) + 12*t*(s + t)*(s - s23 + t))*np.log((2*Q**2 + s + t - np.sqrt(4*Q**2*s23 + (s + t)**2))/(2*Q**2 + s + t + np.sqrt(4*Q**2*s23 + (s + t)**2)))/((-s23 + t)*(4*Q**2*s23 + (s + t)**2)) + (-24*Q**2*s23 - 12*s*(s23 + t) - 12*t*(-s23 + t))/((-s23 + t)*np.sqrt(4*Q**2*s23 + (s + t)**2)))*(-2*Q**2*s23*t - 2*Q**2*t**2 - 2*s*s23*t - 2*s*t**2 + 4*s23*t**2 - 4*t**3)/(np.pi**5*t*(Q**2 + t)*(2*Q**2 + s + t)*np.sqrt(4*Q**2*s23 + s**2 + 2*s*t + t**2)) + 0.000868055555555556*(-s + s23)*(-(24*Q**4*s23 + 12*Q**2*(s**2 + s*(2*s23 + t) + 2*s23*(-s23 + t)) + 12*s*(s + t)*(s - s23 + t))*np.log((2*Q**2 + s + t - np.sqrt(4*Q**2*s23 + (s + t)**2))/(2*Q**2 + s + t + np.sqrt(4*Q**2*s23 + (s + t)**2)))/((s - s23)*(4*Q**2*s23 + (s + t)**2)) + (-12*s**2 - 12*s*(-s23 + t) - 12*s23*(2*Q**2 + t))/((s - s23)*np.sqrt(4*Q**2*s23 + (s + t)**2)))*(4*Q**4*s - 4*Q**4*s23 - 4*Q**4*t + 6*Q**2*s**2 - 6*Q**2*s*s23 - 10*Q**2*s*t - 2*Q**2*t**2 + 2*s**3 - 2*s**2*s23 - 6*s**2*t + 4*s*s23*t - 6*s*t**2)/(np.pi**5*t*(Q**2 + s)*(2*Q**2 + s + t)*np.sqrt(4*Q**2*s23 + s**2 + 2*s*t + t**2)) + 0.000868055555555556*(s23 - t)*((24*Q**4*s23 + 12*Q**2*(s*(2*s23 + t) + 2*s23**2 - 2*s23*t + t**2) + 12*s*s23*(s + t))*np.log((2*Q**2 + s + t - np.sqrt(4*Q**2*s23 + (s + t)**2))/(2*Q**2 + s + t + np.sqrt(4*Q**2*s23 + (s + t)**2)))/((-s23 + t)*(4*Q**2*s23 + (s + t)**2)) + (24*Q**2*s23 + 12*s*(s23 + t) + 12*t*(-s23 + t))/((-s23 + t)*np.sqrt(4*Q**2*s23 + (s + t)**2)))*(-4*Q**4*s23 - 6*Q**2*s*s23 + 8*Q**2*s23*t - 6*Q**2*t**2 - 2*s**2*s23 + 4*s*s23*t - 2*s*t**2)/(np.pi**5*t*(Q**2 + s)*(2*Q**2 + s + t)*np.sqrt(4*Q**2*s23 + s**2 + 2*s*t + t**2)) - 0.0208333333333333*(2*Q**2*s23 - Q**2*t + s*s23)*(Q**2 + s - 2*s23 + 2*t)*(2*np.log(mu) - np.log(s23) + np.log(Q**2*(s23 - t)**2*(Q**2 + s - s23 + t)/(Q**2*(2*s23 - t) + s*s23)**2) - EulerGamma + np.log(np.pi) + 2*np.log(2))/(np.pi**5*t*(Q**2 + s)*(2*Q**2 + s + t)) - 0.0416666666666667*(Q**2*s23 + s*t)*(Q**2 + s - 2*s23 + 2*t)*(-2*np.log(mu) + np.log(s23) + np.log((Q**2*s23 + s*t)/((-s + s23)*(s23 - t))) - 2*np.log(2) - np.log(np.pi) + EulerGamma)/(np.pi**5*t*(Q**2 + s)*(Q**2 + t)) + 0.0208333333333333*(2*np.log(mu) - np.log(s23) + np.log(Q**2*(s23 - t)**2/(t**2*(Q**2 + s - s23 + t))) - EulerGamma + np.log(np.pi) + 2*np.log(2))*(-Q**4*t**2 - 2*Q**2*s*t**2 + 3*Q**2*s23*t**2 - 3*Q**2*t**3 - s**2*t**2 + 3*s*s23*t**2 - 3*s*t**3 - 2*s23**2*t**2 + 4*s23*t**3 - 2*t**4)/(np.pi**5*t**2*(Q**2 + t)*(2*Q**2 + s + t)) + 0.0208333333333333*(Q**6*t + Q**4*s23*t + 5*Q**4*t**2 - Q**2*s**2*t + Q**2*s*s23*t + 5*Q**2*s*t**2 + 5*Q**2*s23*t**2 + 3*Q**2*t**3 + s*s23*t**2 + 7*s*t**3)/(np.pi**5*t**2*(Q**2 + s)*(Q**2 + t)) + 0.0208333333333333*(2*np.log(mu) - np.log(s23) + np.log(Q**2*(s - s23)**2/(s**2*(Q**2 + s - s23 + t))) - EulerGamma + np.log(np.pi) + 2*np.log(2))*(2*Q**6*s + 5*Q**4*s**2 - 6*Q**4*s*s23 + 4*Q**4*s*t + 4*Q**2*s**3 - 9*Q**2*s**2*s23 + 5*Q**2*s**2*t + 4*Q**2*s*s23**2 - 6*Q**2*s*s23*t + 2*Q**2*s*t**2 + s**4 - 3*s**3*s23 + s**3*t + 2*s**2*s23**2 - 2*s**2*s23*t)/(np.pi**5*s*t*(Q**2 + s)*(2*Q**2 + s + t))
@jit(cache=True)
def delta(g=None,gp=None,s=None,t=None,Q=None,s23=None,mu=None,B=None,nf=None):
    return 0
@jit(cache=True)
def plus1B(g=None,gp=None,s=None,t=None,Q=None,s23=None,mu=None,B=None,nf=None):
    return 0
@jit(cache=True)
def plus2B(g=None,gp=None,s=None,t=None,Q=None,s23=None,mu=None,B=None,nf=None):
    return 0
